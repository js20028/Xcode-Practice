* compactMap - 배열에서 nil 제거, 옵셔널바인딩해줌, 1차원 배열일때만 가능
flatMap - 2차원배열을 1차원 배열로 flatten하게 만들어줌, 1차원배열일때는 compactMap과 동일한 결과를 냄
ex) 
let array2: [[Int?]] = [[1, 2, 3], [nil, 5], [6, nil], [nil, nil]]
let flatMapTest2 = array2.flatMap { $0 }.compactMap{ $0 }

<출력>
// flatMapTest2 : [1, 2, 3, 5, 6]

* UserDefaults - set 메서드로 데이터 저장, object 메서드로 데이터 로드, object 메서드는 Any 타입으로 리턴됨

* didSet - 프로퍼티의 값이 변경된 직후에 호출
* willSet - 프로퍼티의 값이 변경되기 직전에 호출

* dictionary

* ns타입 - 대부분 Objective-C의 타입

* content hugging - 텍스트의 이미지에따라 크기가 결정되는 컨텐츠(버튼, 라벨 등)의 고유크기가 있는데 더 늘어나는것에 대해 저항하는 제약, 우선순위가 낮은것이 늘어남
* content compression resistance - 줄어드는것에 대해 저항하는 제약(압축에대한 저항), 우선순위가 높은것이 크기가 줄어들지않음

* 랜덤함수 
[swift 4.2 이전]
arc4random() -> UInt32 - 0~2^32-1의 범위의 난수 반환
arc4random_uniform(UInt32) -> UInt32 - 파라미터로 넣은 UInt32-1 사이의 난수 리턴
drand48() -> Double - 0부터 1.0 사이의 난수 리턴
arc4random_uniform(5) // 0~4 사이의 난수 랜덤생성, 배열의 인덱스요소에 접근하려면 Int(arc4random_uniform(5))로 사용

[swift 4.2 이후]
Int.rand(in: 0..5) // 0~5사이의 Int난수 생성


* print 함수 - 매개변수로 separator, terminator 생략되어있음
separator : 디폴트는 “ “ 프린트 , 사이에 원하는 문자로 구문가능
terminator : 디폴트는 “\n”


* tuple - 여러 값을 하나의 개체에 일시적으로 묶는방법, 함수에서 여러 값들을 한번에 반환 가능
ex)
빈 튜플은 Void, typealias Void = ()
let myTuple = (10, 12.1, “Hi”) 
튜플의 요소에 접근하려면 myTuple.0  // 10
let (myInt, myFloat, myString) = myTuple // myInt = 10, myFloat = 12.1, myString = “Hi”
let myTuple = (count: 10, length: 12.1, message: “Hi”) // 각 요소에 이름설정가능, 접근할때 myTuple.count 로 가능
